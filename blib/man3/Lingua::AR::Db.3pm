.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Lingua::AR::Db 3pm"
.TH Lingua::AR::Db 3pm "2006-07-14" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Lingua::AR::Db \- Perl extension for translating Arabic words into another language
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&        use utf8;
\&        use Lingua::AR::Db;
.Ve
.PP
.Vb 2
\&        # this will create a new DB or load an already existent DB
\&        my $db=Lingua::AR::Db\->new($db_name);
.Ve
.PP
.Vb 3
\&        # this will append new translations to the word "مكتب"
\&        my $arabic_word="مكتب";
\&        $db\->value($arabic_word,@translations);
.Ve
.PP
.Vb 5
\&        # let's print out all the translations of the $arabic_word
\&        my @array=@{$db\->translate($arabic_word)};
\&        foreach(@array){
\&                print "$arabic_word means $_\en";
\&        }
.Ve
.PP
.Vb 4
\&        # this will return every entry of the Database,
\&        # formatted as "STEM::WORD\etTRANSLATION"
\&        my $dump=$db\->export;
\&        print $dump;
.Ve
.PP
.Vb 2
\&        # this will export the Database in HTML form under the "./html/" directory
\&        $db\->export_html("./html");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module will take care of the translating an Arabic word into another language through a persistent hash located in a Database.
.PP
You may add new values (translations) to the \s-1DB\s0, as well as getting the translation back and exporting into text format or \s-1HTML\s0 the whole \s-1DB\s0.
.PP
The \s-1DB\s0 is structured as a double hash: primary key is the stem of the word, the second key is the word itself.
The resulting value pointed by these two keys is the translations array.
.PP
If you're interested in a front-end to this module, I'm going to develop one based on Qt widgets.
More info @ www.qitty.net
.PP
I'm going to publish my own Arabic\->Italian dictionary on my site @ www.qitty.net
.SH "NOTE"
.IX Header "NOTE"
Please note that every time you inquire the \s-1DB\s0, your arabic word and/or the stem of it, is encoded into ArabTeX.
This is because Unicode strings can't be keys of the hash at any level.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
On my site, you may get additional info about this module.
You may find more info about ArabTeX at ftp://ftp.informatik.uni\-stuttgart.de/pub/arabtex/arabtex.htm
.SH "TODO"
.IX Header "TODO"
.IP "correct use of delete and consequent export[_html]" 4
.IX Item "correct use of delete and consequent export[_html]"
.PD 0
.IP "display Arabic characters (instead of|along with) the translitterated ones and sort them according to the Arabic alphabet" 4
.IX Item "display Arabic characters (instead of|along with) the translitterated ones and sort them according to the Arabic alphabet"
.IP "add accessory methods and variables as needed (translation language,..)" 4
.IX Item "add accessory methods and variables as needed (translation language,..)"
.IP "export to \s-1XML\s0" 4
.IX Item "export to XML"
.PD
.SH "AUTHOR"
.IX Header "AUTHOR"
Andrea Benazzo, <andy@slacky.it>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2006 Andrea Benazzo. All rights reserved.
 This program is free software; you can redistribute it and/or
 modify it under the same terms as Perl itself.
